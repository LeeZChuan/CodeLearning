
//该程序为奇偶排序
//排序算法介绍：
//给定一组数据如下：1，3，5，2，8，6，4，7
//第一趟排序，对所有奇数项扫描，如果比后一项大，交换：
//[1，3]，[5，2]，[8，6]，[4，7] = > [1，3]，[2，5]，[6，8]，[4，7]
//第二趟排序，对所有偶数项扫描，如果比后一项大，交换：
//1，[3，2]，[5，6]，[8，4]，7  = > 1，[2，3]，[5，6]，[4，8]，7
//第三趟排序，对所有奇数项扫描，如果比后一项大，交换：
//[1，2]，[3，5]，[6，4]，[8，7] = > [1，2]，[3，5]，[4，6]，[7，8]
//第四趟排序，对所有偶数项扫描，如果比后一项大，交换：
//1，[2，3]，[5，4]，[6，7]，8  = > 1，[2，3]，[4，5]，[6，7]，8 

#include <iostream>;
using namespace std;


void Sort(int Arr[], int length) {
	int temp;//中间量
	int m = 1;
	int n = 1;
	while (m || n)
	{
		for (int i = 0; i < length - 1; i = i + 2)
			//找出
		{
			if (Arr[i] > Arr[i + 1])
			{
				temp = Arr[i];
				Arr[i] = Arr[i + 1];
				Arr[i + 1] = temp;
				m = 1;
			}
			else
				m = 0;
		}
		for (int j = 1; j < length - 1; j = j + 2)
		{
			if (Arr[j] > Arr[j + 1])
			{
				temp = Arr[j];
				Arr[j] = Arr[j + 1];
				Arr[j + 1] = temp;
				m = 1;
			}
			else
				n = 0;
		}
	}
}

void OutputArr(int Arr[], int length) {
	for (int i = 0; i < length; i++)
	{
		cout << Arr[i] << ", ";

	}
	cout << endl;
}

void main() {
	int Arr[] = { 45,57,12,31,1,60,92,71,87 };
	Sort(Arr, 9);
	OutputArr(Arr, 9);
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
